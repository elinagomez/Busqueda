geom_line(size = 1.2) +
geom_point(size = 2) +
#scale_color_manual(values = colores_cuentas) +
labs(title = "Interacciones con cuentas mencionadas cada 4 meses",
x = "Periodo (4 meses)",
y = "Cantidad de interacciones",
color = "Cuenta Mencionada") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo <- ggplotly(grafico, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
grafico_interactivo
# Crear gráfico con ggplot
grafico <- ggplot(interacciones_por_periodo, aes(x = periodo, y = conteo,
color = menciones, group = menciones,
text = paste0("Cuenta: ", menciones, "<br>",
"Periodo: ", format(periodo, "%b %Y"), "<br>",
"Interacciones: ", conteo))) +
geom_line(size = 1) +
geom_point(size = 2) +
#scale_color_manual(values = colores_cuentas) +
labs(title = "Interacciones con cuentas mencionadas",
x = "Periodo (4 meses)",
y = "Cantidad de interacciones",
color = "Cuenta Mencionada") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo <- ggplotly(grafico, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
grafico_interactivo
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
top_cuentas <- respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)
View(top_cuentas)
library(knitr)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
top_cuentas <- respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
kableExtra::kbl() %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = F, position = "center")
library(knitr)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
kableExtra::kbl() %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = F, position = "center")
# Crear las cuentas más mencionadas
top_cuentas <- respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(10, n)  # Selecciona las 15 más mencionadas
interacciones_por_periodo <- respuestas %>%
filter(menciones %in% top_cuentas$menciones) %>%
mutate(fecha = as.Date(Fecha_corta),
periodo = floor_date(fecha, unit = "1 year")) %>%
group_by(periodo, menciones) %>%
summarise(conteo = n(), .groups = "drop")
# Crear gráfico con ggplot
grafico <- ggplot(interacciones_por_periodo, aes(x = periodo, y = conteo,
color = menciones, group = menciones,
text = paste0("Cuenta: ", menciones, "<br>",
"Periodo: ", format(periodo, "%b %Y"), "<br>",
"Interacciones: ", conteo))) +
geom_line(size = 1) +
geom_point(size = 2) +
#scale_color_manual(values = colores_cuentas) +
labs(title = "Interacciones con 10 cuentas más mencionadas (2015-2025)",
x = "Periodo (4 meses)",
y = "Cantidad de interacciones",
color = "Cuenta Mencionada") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo <- ggplotly(grafico, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
grafico_interactivo
# Crear gráfico con ggplot
grafico <- ggplot(interacciones_por_periodo, aes(x = periodo, y = conteo,
color = menciones, group = menciones,
text = paste0("Cuenta: ", menciones, "<br>",
"Periodo: ", format(periodo, "%b %Y"), "<br>",
"Interacciones: ", conteo))) +
geom_line(size = 1) +
geom_point(size = 2) +
#scale_color_manual(values = colores_cuentas) +
labs(title = "Evolución de interacciones con 10 cuentas más mencionadas (2015-2025)",
x = "Periodo (4 meses)",
y = "Cantidad de interacciones",
color = "Cuenta Mencionada") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo <- ggplotly(grafico, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
saveWidget(grafico_interactivo, "C:/Users/elina/OneDrive/Escritorio/Draper/Salle/Twitter/plots/evo_interacciones.html", selfcontained = TRUE)
library(tringr)
library(knitr)
library(stringr)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
kableExtra::kbl() %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = F, position = "center")
# Crear gráfico con ggplot
grafico <- ggplot(interacciones_por_periodo, aes(x = periodo, y = conteo,
color = menciones, group = menciones,
text = paste0("Cuenta: ", menciones, "<br>",
"Periodo: ", format(periodo, "%b %Y"), "<br>",
"Interacciones: ", conteo))) +
geom_line(size = 1) +
geom_point(size = 2) +
#scale_color_manual(values = colores_cuentas) +
labs(title = "Evolución de interacción con 10 cuentas más mencionadas",
x = "Periodo (4 meses)",
y = "Cantidad de interacciones",
color = "Cuenta Mencionada") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank())
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo <- ggplotly(grafico, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
grafico_interactivo
library(knitr)
library(stringr)
library(kableExtra)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
scroll_box(width = "100%", height = "500px")  # Ajustar anch
library(knitr)
library(stringr)
library(kableExtra)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
column_spec(1, border_left = TRUE, border_right = TRUE) %>%  # Opcional: Agrega bordes a las columnas
scroll_box(width = "100%", height = "500px")
library(knitr)
base %>%
group_by(Anio)%>%
summarize(N=n())%>%
arrange(-N)%>%
kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
column_spec(1, border_left = TRUE, border_right = TRUE) %>%  # Opcional: Agrega bordes a las columnas
scroll_box(width = "100%", height = "500px")
library(knitr)
library(stringr)
library(kableExtra)
saveWidget(grafico_interactivo, "C:/Users/elina/OneDrive/Escritorio/Draper/Salle/Twitter/plots/evo_interacciones.html", selfcontained = TRUE)
library(knitr)
library(kableExtra)
base %>%
group_by(Anio)%>%
summarize(N=n())%>%
arrange(-N)%>%
kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
column_spec(1:ncol(.), align = "c") %>%  # Centra el contenido de todas las columnas
scroll_box(width = "100%", height = "500px")
library(knitr)
library(kableExtra)
base %>%
group_by(Anio)%>%
summarize(N=n())%>%
arrange(-N)%>%
kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
column_spec(1:ncol(.), align = "c") %>%  # Centra el contenido de todas las columnas
scroll_box(width = "100%", height = "500px")
base %>%
group_by(Anio)%>%
summarize(N=n())%>%
arrange(-N)%>%
kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
column_spec(1:ncol(.), align = "center") %>%  # Centra el contenido de todas las columnas
scroll_box(width = "100%", height = "500px")
?column_spec
library(knitr)
library(kableExtra)
base %>%
group_by(Anio)%>%
summarize(N=n())%>%
arrange(-N)%>%
kbl(align = 'c') %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
column_spec(1:ncol(.), align = "center") %>%
scroll_box(width = "100%", height = "500px")
library(knitr)
library(kableExtra)
base %>%
group_by(Anio)%>%
summarize(N=n())%>%
arrange(-N)%>%
kbl(align = 'c') %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
# column_spec(1:ncol(.), align = "center") %>%
scroll_box(width = "100%", height = "500px")
library(knitr)
library(stringr)
library(kableExtra)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
kbl(align = 'c') %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
scroll_box(width = "100%", height = "500px")
?rename
dplyr::rename()
?dplyr::rename()
library(knitr)
library(stringr)
library(kableExtra)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
dplyr::rename(Cuenta=menciones,N=n) %>%
kbl(align = 'c') %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
scroll_box(width = "100%", height = "500px")
library(knitr)
library(stringr)
library(kableExtra)
respuestas <- base %>% filter(comentario==1)
respuestas <- respuestas %>%
mutate(menciones = str_extract_all(Text, "@\\w+")) %>%
unnest(menciones) %>%
mutate(menciones = str_remove(menciones, "@"))
respuestas %>%
count(menciones, sort = TRUE) %>%
top_n(20, n)%>%
arrange(-n)%>%
dplyr::rename(Cuenta=menciones,Menciones=n) %>%
kbl(align = 'c') %>%
kable_styling(bootstrap_options = "striped", full_width = TRUE, position = "center") %>%
scroll_box(width = "100%", height = "500px")
base=openxlsx::read.xlsx("C:/Users/elina/OneDrive/Escritorio/Draper/Salle/Twitter/base_final.xlsx")
base <- base %>%
mutate(
Fecha = ymd_hms(Time),
Anio = year(Fecha),
Mes = month(Fecha),
Dia = day(Fecha),
Fecha_corta = as.Date(Fecha)
)
evo_tipo <- base %>%
group_by(Anio, comentario) %>%
summarise(conteo_posteos = n(), .groups = "drop") %>%
mutate(tipo_posteo = ifelse(comentario == 1, "Comentario", "Posteo original"))%>%
mutate(tipo_posteo = factor(tipo_posteo, levels=c("Posteo original","Comentario")))%>%
mutate(Anio=as.factor(Anio))%>%
filter(Anio!=2025)
# Crear gráfico en ggplot
grafico_tipo <- ggplot(evo_tipo, aes(x = Anio, y = conteo_posteos,
color = tipo_posteo,
group = tipo_posteo,
text = paste0("Tipo: ", tipo_posteo, "<br>",
"Año: ", Anio, "<br>",
"Cantidad: ", conteo_posteos))) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_color_manual(values = c("Comentario" = "#e31a1c", "Posteo original" = "#1f78b4")) +
labs(title = "Evolución de posteos por tipo y año",
x = "Año",
y = "Cantidad de posteos",
color = "Tipo de Posteo") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1))
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo_tipo <- ggplotly(grafico_tipo, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
grafico_interactivo_tipo
saveWidget(grafico_interactivo_tipo, "C:/Users/elina/OneDrive/Escritorio/Draper/Salle/Twitter/plots/grafico_tipo.html", selfcontained = TRUE)
# Definir las categorías y sus palabras clave
diccionario <- dictionary(list(
"Orden global y política" = c("2030", "agenda", "masón", "masonería", "judío",
"corporatocracia", "casta", "davos", "israel",
"kissinger", "narco", "plutocracia", "plutócrata",
"plutocr", "clepto", "george soros", "agenda soros",
"bill gates", "corporación"),
"Ambiente" = c("agua", "ambiente", "clima", "climático", "upm",
"hidrógeno verde", "forestal"),
"Pandemia" = c("pandemia", "covid", "vacuna", "plandemia"),
"Sistema judicial" = c("abogacía", "abogado", "constitución", "constitucional",
"corrupción", "corrupto", "coimero", "coima", "fiscal",
"justicia")
))
# Crear corpus y tokens
corpus_tweets <- corpus(base, text_field = "Text")
tokens_tweets <- tokens(corpus_tweets, remove_punct = TRUE) %>%
tokens_tolower()
# Crear el dfm y aplicar el diccionario de categorías
dfm_tweets <- dfm(tokens_tweets)
dfm_categorias <- dfm_lookup(dfm_tweets, dictionary = diccionario)
# Agregar el doc_id (identificador único para cada tweet)
dfm_categorias <- dfm_categorias %>%
convert(to = "data.frame") %>%
mutate(doc_id = row_number())  # Añadimos una columna doc_id con números secuenciales
baseunida <- dfm_categorias %>%
pivot_longer(cols = -doc_id, names_to = "categoria", values_to = "mencionada") %>%
filter(mencionada > 0) %>%
left_join(base %>%
mutate(doc_id = row_number())%>%
mutate(Anio = as.factor(Anio))%>%
select(doc_id, Anio,Text), by = c("doc_id" = "doc_id"))
# Unir con la base original para obtener el año
conteos_categorias <- dfm_categorias %>%
pivot_longer(cols = -doc_id, names_to = "categoria", values_to = "mencionada") %>%
filter(mencionada > 0) %>%
left_join(base %>%
mutate(doc_id = row_number())%>%
mutate(Anio = as.factor(Anio))%>%
select(doc_id, Anio,Text), by = c("doc_id" = "doc_id")) %>%
group_by(Anio, categoria) %>%
summarise(conteo_posteos = n(), .groups = "drop")%>%
filter(Anio!=2025)
# Definir una paleta de colores personalizada para las categorías
colores_categoria <- c(
"Orden global y política" = "#1f78b4",
"Ambiente" = "#33a02c",
"Pandemia" = "#e31a1c",
"Sistema judicial" = "#ff7f00"
)
# Crear el gráfico con ggplot
grafico <- ggplot(conteos_categorias, aes(x = Anio, y = conteo_posteos, color = categoria, group = categoria,
text = paste0("Categoría: ", categoria, "<br>",
"Año: ", Anio, "<br>",
"Posteos: ", conteo_posteos))) +
geom_line(size = 1) +
geom_point(size = 2) +  # Agrega puntos para resaltar valores
scale_color_manual(values = colores_categoria) + # Aplicar colores definidos
labs(title = "Evolución de posteos por categoría y año",
x = "Año",
y = "Cantidad de posteos",
color = "Categoría") +
theme_minimal(base_size = 14) +  # Ajustar tamaño de fuente
theme(legend.position = "bottom",  # Ubicar la leyenda abajo
plot.title = element_text(hjust = 0.5, face = "bold"), # Centrar y resaltar título
axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje X
# Convertir a gráfico interactivo con ggplotly y personalizar leyenda y tooltip
grafico_interactivo <- ggplotly(grafico, tooltip = "text") %>%
layout(legend = list(orientation = "h",  # Horizontal
x = 0.5,  # Centrar en X
y = -0.2,  # Ubicar debajo del gráfico
xanchor = "center",
yanchor = "top",
title = list(text = "")))  # Eliminar título de la leyenda
saveWidget(grafico_interactivo, "C:/Users/elina/OneDrive/Escritorio/Draper/Salle/Twitter/plots/evo_cat.html", selfcontained = TRUE)
diccionario <- dictionary(list(
"Orden global y política" = c("2030", "agenda", "masón*", "masonería", "judío*",
"corporatocracia", "casta", "davos", "israel*",
"kissinger", "narco*", "plutocracia", "plutócrata",
"plutocr**", "clepto*", "george soros", "agenda soros",
"bill gates", "corporación*"),
"Ambiente" = c("agua", "ambiente", "clima", "climático*", "upm",
"hidrógeno verde", "forestal"),
"Pandemia" = c("pandemia", "covid", "vacun*", "plandemia"),
"Sistema judicial" = c("abogacía", "abogado*", "constitución*", "constitucional*",
"corrupción", "corrupto*", "coimero*", "coima*", "fiscal*",
"justicia")
))
corpus_tweets <- corpus(base, text_field = "Text")
tokens_tweets <- tokens(corpus_tweets, remove_punct = TRUE)
tokens_tweets <- tokens_tolower(tokens_tweets)
dfm_tweets <- dfm(tokens_tweets)
dfm_categorias <- dfm_lookup(dfm_tweets, dictionary = diccionario)
dfm_anual <- dfm_group(dfm_categorias, groups = base$Anio)
conteos <- convert(dfm_anual, to = "data.frame")
conteos_tidy <- conteos %>%
pivot_longer(
cols = -doc_id, # Todas las columnas excepto 'document' se convierten en valores largos
names_to = "categoria", # Nombre de las columnas largas
values_to = "conteo"    # Nombre de la columna con los valores
)
conteos_tidy <- conteos_tidy %>%
rename(Anio = doc_id) %>%  # Asumiendo que doc_id representa el año
filter(Anio != 2025)  # Excluir 2025 si es necesario
# Definir colores para cada categoría
colores_categoria <- c(
"Orden global y política" = "#1f78b4",
"Ambiente" = "#33a02c",
"Pandemia" = "#e31a1c",
"Sistema judicial" = "#ff7f00"
)
# Crear el gráfico con ggplot
grafico_terminos <- ggplot(conteos_tidy, aes(x = Anio, y = conteo, color = categoria, group = categoria,
text = paste0("Categoría: ", categoria, "<br>",
"Año: ", Anio, "<br>",
"Términos mencionados: ", conteo))) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_color_manual(values = colores_categoria) +
labs(title = "Evolución de menciones de términos por categoría y año",
x = "Año",
y = "Cantidad de menciones",
color = "Categoría") +
theme_minimal(base_size = 14) +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1))
# Convertir a gráfico interactivo con ggplotly
grafico_interactivo_terminos <- ggplotly(grafico_terminos, tooltip = "text") %>%
layout(legend = list(orientation = "h",
x = 0.5,
y = -0.2,
xanchor = "center",
yanchor = "top",
title = list(text = "")))
saveWidget(grafico_interactivo_terminos, "C:/Users/elina/OneDrive/Escritorio/Draper/Salle/Twitter/plots/evo_terminos.html", selfcontained = TRUE)
4*6
1600/4
4*4
